# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: doughnut CI

on:
  push:
    branches:
      - main

env:
  ARTIFACT: "doughnut"
  VERSION: "0.0.1-SNAPSHOT"
  GCS_BUCKET: "dough-01"
  RUNNER_OS: "ubuntu-latest"
  MYSQL_UT_DB: "doughnut_test"
  MYSQL_E2E_DB: "doughnut_e2e_test"
  MYSQL_DB_USER: ${{ secrets.DBUSER }}
  MYSQL_DB_PASSWORD: ${{ secrets.DBPASSWORD }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

jobs:
  Linting:
    name: cypress/backend/frontend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/setup_jdk_with_cache
      - uses: actions/checkout@v3
      - uses: ./.github/setup_nodejs_with_cache
      - run: yarn lint:all

  Backend-unit-tests:
    name: Backend Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup MySQL DB Server
        uses: ./.github/mysql_db
        with:
          mysql_db_instance: ${{ env.MYSQL_UT_DB }}
          mysql_db_user: ${{ env.MYSQL_DB_USER }}
          mysql_db_password: ${{ env.MYSQL_DB_PASSWORD }}
      - uses: ./.github/setup_jdk_with_cache
      - run: backend/gradlew -p backend testDBMigrate -Dspring.profiles.active=test
      - run: backend/gradlew -p backend test -Dspring.profiles.active=test --parallel
      - run: bash -c ./assert_generated_type_script_up_to_date.sh

  Frontend-unit-tests:
    name: Frontend Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/setup_nodejs_with_cache
      - run: yarn frontend:test

  Package-artifacts:
    name: Package backend & frontend artifacts for deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/setup_jdk_with_cache
      - uses: ./.github/setup_nodejs_with_cache
      - name: Compile & transform frontend assets for bundling with Backend
        run: yarn frontend:build
      - name: Build application jar artifact
        run: backend/gradlew -p backend build -x test -Dspring.profiles.active=prod --build-cache --parallel
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT }}-${{ env.VERSION }}.jar
          path: backend/build/libs/${{ env.ARTIFACT }}-${{ env.VERSION }}.jar

  E2E-tests:
    name: End-to-End tests with Database
    runs-on: ubuntu-latest
    strategy:
      matrix:
        spec:
          - |
            cypress/integration/b*/**
          - |
            cypress/integration/c*/**
          - |
            cypress/integration/t*/**
            cypress/integration/u*/**
            cypress/integration/w*/**
          - |
            cypress/integration/notes*/**
          - |
            cypress/integration/notebooks*/**
          - |
            cypress/integration/r*/**
          - |
            cypress/integration/s*/**
          - |
            cypress/integration/v*/**
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/mysql_db
        with:
          mysql_db_instance: ${{ env.MYSQL_E2E_DB }}
          mysql_db_user: ${{ env.MYSQL_DB_USER }}
          mysql_db_password: ${{ env.MYSQL_DB_PASSWORD }}
      - name: Setup JDK with cache
        uses: ./.github/setup_jdk_with_cache
      - uses: ./.github/setup_nodejs_with_cache
      - uses: cypress-io/github-action@v3
        with:
          browser: chrome
          headless: true
          config-file: cypress/config/ci.json
          install-command: yarn --frozen-lockfile --silent
          build: yarn frontend:build
          start: yarn run-p -clnr start:mb sut
          wait-on: "http://127.0.0.1:9081/api/healthcheck"
          wait-on-timeout: 150
          spec: ${{ matrix.spec }}
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

  Deploy:
    name: GCP MIG Rolling Update Deploy
    runs-on: ubuntu-latest
    needs: [Linting, Backend-unit-tests, Frontend-unit-tests, Package-artifacts, E2E-tests]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/gcloud_auth_n_sdk
        with:
          credentials_json: ${{ env.GCP_CREDENTIALS }}
      - name: Upload production application jar to Google Cloud Storage
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT }}-${{ env.VERSION }}.jar
      - uses: google-github-actions/upload-cloud-storage@v0
        with:
          path: ./${{ env.ARTIFACT }}-${{ env.VERSION }}.jar
          destination: ${{ env.GCS_BUCKET }}/backend_app_jar
      - name: Perform rolling replace to GCP MIG doughnut-app-group
        run: infra/scripts/perform-rolling-replace-app-mig.sh

  Slack-Notify:
    name: Single summary slack notification for entire workflow
    runs-on: ubuntu-latest
    needs: [Linting, Backend-unit-tests, Frontend-unit-tests, Package-artifacts, E2E-tests, Deploy]
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: 8398a7/action-slack@v3
        if: env.WORKFLOW_CONCLUSION == 'failure'
        with:
          status: failure
          fields: repo,commit,message,author,action,workflow,eventName
      # - uses: nobrayner/discord-webhook@v1
      #   if: env.WORKFLOW_CONCLUSION == 'failure'
      #   with:
      #     github-token: ${{ env.GITHUB_TOKEN }}
      #     discord-webhook: ${{ env.DISCORD_WEBHOOK_URL }}
  #
  #
  # mobile-unit-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: subosito/flutter-action@v1
  #       with:
  #         flutter-version: "2.16.2"
  #     - run: flutter pub get
  #       working-directory: ./doughnut_mobile
  #     - run: flutter test
  #       working-directory: ./doughnut_mobile
  # drive_ios:
  #   strategy:
  #     matrix:
  #       device:
  #         - "iPhone 11"
  #     fail-fast: false
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: List Simulators
  #       run: xcrun xctrace list devices
  #     - name: Start Simulator
  #       run: xcrun simctl boot "${{ matrix.device }}"
  #     - uses: actions/checkout@v3
  #     - uses: ./.github/starting_backend_actions
  #       with:
  #         dbuser: ${{ secrets.DBUSER }}
  #         dbpassword: ${{ secrets.DBPASSWORD }}
  #         db_url: ${{ secrets.CI_E2E_DB_URL }}
  #     - uses: ./.github/mobile_actions
  #       with:
  #         flutter-version: "2.5.3"
  #     - run: dart test_driver/app_test.dart
  #       working-directory: ./doughnut_mobile
  # drive_android:
  #   runs-on: ubuntu-latest
  #   #creates a build matrix for your jobs
  #   strategy:
  #     #set of different configurations of the virtual environment.
  #     matrix:
  #       api-level: [29]
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: ./.github/starting_backend_actions
  #       with:
  #         dbuser: ${{ secrets.DBUSER }}
  #         dbpassword: ${{ secrets.DBPASSWORD }}
  #         db_url: ${{ secrets.CI_E2E_DB_URL }}
  #     - uses: ./.github/mobile_actions
  #       with:
  #         flutter-version: "2.5.3"
  #     - name: Run Flutter Driver tests
  #       uses: reactivecircus/android-emulator-runner@v2.21.0
  #       with:
  #         api-level: ${{ matrix.api-level }}
  #         script: |
  #           cd ./doughnut_mobile && dart test_driver/app_test.dart
